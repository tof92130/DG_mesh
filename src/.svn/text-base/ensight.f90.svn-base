module m_ensight

  implicit none
  private

  interface readEnsightMeshASCII  ; module procedure m_ReadEnsightMeshASCII  ; end interface
  interface writeEnsightCase      ; module procedure m_WriteEnsightCase      ; end interface 
  interface writeEnsightMeshASCII ; module procedure m_WriteEnsightMeshASCII ; end interface
  interface writeEnsightMeshBIN   ; module procedure m_WriteEnsightMeshBIN   ; end interface
  interface writeEnsightSoluBIN   ; module procedure m_WriteEnsightSoluBIN   ; end interface

  public :: readEnsightMeshASCII
  public :: writeEnsightCase
  public :: writeEnsightMeshASCII
  public :: writeEnsightMeshBIN
  public :: writeEnsightSoluBIN

contains


  subroutine m_ReadEnsightMeshASCII(FileIn, vertices, tetra, trian, edges)
    !------------------------------------------------------
    !
    ! ReadEnsightMeshBIN Reads mesh data in Ensight's binary format
    !
    !------------------------------------------------------
    implicit none
    character(256)            , intent(in)  :: fileIn
    real(8)      , allocatable, intent(out) :: vertices(:,:)
    integer      , allocatable, intent(out) :: tetra   (:,:)
    integer      , allocatable, intent(out) :: trian   (:,:)
    integer      , allocatable, intent(out) :: edges   (:,:)
    !------------------------------------------------------
    integer                    :: ipart,mark,nVert0
    real(8)      , allocatable :: xyz(:,:)
    integer(4)   , allocatable :: ijk(:,:)
    character(80)              :: buffer
    character(80)              :: part
    integer                    :: geo  =0
    integer                    :: nVert=0
    integer                    :: nT4  =0
    integer                    :: nT3  =0
    integer                    :: nL2  =0
    integer                    :: i,n0,n1
    integer      , parameter   :: iens=11
    real(8)                    :: xmin,xmax,ymin,ymax,zmin,zmax
    integer                    :: ierr
    !------------------------------------------------------
    open(unit=iens,file=trim(fileIn)//'.geom',form='formatted',status='old',action='read',iostat=ierr)
    if( ierr/=0 )then
      open(unit=iens,file=trim(fileIn)//'.geo',form='formatted',status='old',action='read',iostat=ierr)
      if( ierr/=0 )then
        write(*,'("File: ",a," doesn''t exist")')trim(fileIn)//'.geom'
        write(*,'("File: ",a" doesn''t exist")')trim(fileIn)//'.geo'
        stop
      else
        write(*,'(3a)')'Reading ASCII Ensight Format File: ',trim(fileIn)//'.geo'
      endif
    else
      write(*,'(3a)')'Reading ASCII Ensight Format File: ',trim(fileIn)//'.geom'
    endif
    !
    !     Header
    !
    read(iens,*) !'Ensight ASCII Model Geometry -- File Created by'
    read(iens,*) !'WriteEnsightMeshASCII'
    read(iens,*) !'node id given'
    read(iens,*) !'element id given'

    FileReading : do while (.not.eof(iens) )
    
      read(iens,'(a)'    )buffer
      select case( trim(buffer) )
      case('extents')
        read(iens,*)xmin,xmax
        read(iens,*)ymin,ymax
        read(iens,*)zmin,zmax
        write(*,'("BoundingBox")')
        write(*,'(3x,"x: ",2e12.5)')xmin,xmax
        write(*,'(3x,"x: ",2e12.5)')ymin,ymax
        write(*,'(3x,"x: ",2e12.5)')zmin,zmax

      case('part')
    
        read(iens,*     ) ipart ! part number
        read(iens,'(a)' ) part  ! part name
        write(*,'(a,i2,/2x,a)')'Start Reading part ',ipart,trim(part)

      case('coordinates') ! Vertices
        ! 
        read(iens,*) n1
        write(*,'(3x,a,i10,a,i2)')'Reading ',n1,' vertices @ part ',ipart

        nVert0=nVert
        n0=nVert+1 ; nVert=nVert+n1

        allocate(xyz(3,nVert))
        xyz(1:3,1:n0-1)=vertices(1:3,1:n0-1)
        call move_alloc (xyz, vertices)

        read (iens,*)(vertices(1,i), i=n0,nVert)
        read (iens,*)(vertices(2,i), i=n0,nVert)
        read (iens,*)(vertices(3,i), i=n0,nVert)

      case('tetra4') ! Tetrahedra
        !
        read (iens,'(i10)' ) n1
        write(*,'(3x,a,i10,a,i2)')'Reading ',n1,' tetra4   @ part ',ipart

        n0=nT4+1 ; nT4=nT4+n1

        allocate(ijk(5,nT4)) ; ijk(1:5,1:n0-1)=tetra(1:5,1:n0-1)
        call move_alloc (ijk, tetra)      

       !read (iens,'(i10)' ) (ke, ke=1,nel)
        read (iens,'(4i10)') (tetra(1:4,i),i=n0,nT4)
        tetra(5,n0:nT4)=ipart

      case('tria3') ! Triangles
        !
        read (iens,'(i10)' ) n1
        write(*,'(3x,a,i10,a,i2)')'Reading ',n1,' tria3    @ part ',ipart
        n0=nT3+1 ; nT3=nT3+n1

        allocate(ijk(4,nT3)) ; ijk(1:4,1:n0-1)=trian(1:4,1:n0-1)
        call move_alloc(ijk,trian)      

       !read (iens,'(i10)' ) (ke, ke=1,nel)
        read (iens,'(3i10)') (trian(1:3,i) ,i=n0,nT3)
        trian(1:3,n0:nT3)=trian(1:3,n0:nT3)+nVert0
  
        mark=ipart
       !select case( ipart )
       !case(1) ; mark=5
       !case(2) ; mark=2
       !case(3) ; mark=2
       !case(4) ; mark=1
       !case(5) ; mark=3
       !case(6) ; mark=6
       !case(7) ; mark=4
       !end select

        trian(4,n0:nT3)=mark

      case('bar2') ! Edges
        !
        read (iens,'(i10)' ) n1
        write(*,'(3x,a,i10,a,i2)')'Reading ',n1,' bar2    @ part ',ipart
        n0=nL2+1 ; nL2=nL2+n1

        allocate(ijk(3,nL2)) ; ijk(1:3,1:n0-1)=edges(1:3,1:n0-1)
        call move_alloc(ijk,edges)

       !read (iens,'(i10)' ) (ke, ke=1,nel)
        read (iens,'(2i10)') (edges(1:2,i) ,i=n0,nL2)
        edges(1:2,n0:nL2)=edges(1:2,n0:nL2)+nVert0

      case default
  
        write(*,'(/a/)')'case default'
        write(*,'(a)')trim(buffer)
        stop

      end select
    
    enddo FileReading
    close(iens)

   vertices=vertices*1e-3

    write(*,'(//a,i6)')'Number of Vertices:  ',nVert
    write(*,'(3x,a/,5x,3e12.5,/5x,3e12.5)')'BoundingBox xyz',&
    & minval(vertices(1,1:nVert)),&
    & minval(vertices(2,1:nVert)),&
    & minval(vertices(3,1:nVert)),&
    & maxval(vertices(1,1:nVert)),&
    & maxval(vertices(2,1:nVert)),&
    & maxval(vertices(3,1:nVert))

    write(*,'(/a,i6)')'Number of Tetrahedra:',nT4
    write(*,'(/a,i6)')'Number of Triangles: ',nT3
    write(*,'(/a,i6)')'Number of Edges:     ',nL2


  end subroutine m_ReadEnsightMeshASCII


  subroutine m_WriteEnsightCase(FileOut,solution,n0,n1)
    !------------------------------------------------------
    !
    !  EnsightCase helps to write a Ensight's case file
    !
    !------------------------------------------------------  
    character(50)      :: FileOut
    logical            :: solution
    integer            :: n0
    integer            :: n1
    !------------------------------------------------------
    integer            :: i,j
    character(4)       :: sfx
    !------------------------------------------------------
    write(*,'(3a)')'Writing Ensight Case Mesh:   ',trim(FileOut)//'.case'

    open(20,file=trim(FileOut)//'.case',form='formatted',action='write')  
    write(20,'(a)')'FORMAT'
    write(20,'(a/)')'type: ensight gold'

    write(20,'(a)')'GEOMETRY'
    write(20,'(a,a,a/)')'model: ',trim(FileOut),'.geom'

    if( solution )then
      write(20,'(a)')'VARIABLE'
 
      if( n0==n1 )then

        write(20,'(3a)')'scalar per node: pressure      ',trim(FileOut),'_p1_0000.dat'
        write(20,'(3a)')'vector per node: velocity      ',trim(FileOut),'_v1_0000.dat'

      else

        write(20,'(3a)')'scalar per node: pressure      ',trim(FileOut),'_p1_****.dat'
        write(20,'(3a)')'scalar per node: velocity      ',trim(FileOut),'_v1_****.dat'

        write(20,'(/a)')'TIME'
        write(20,'(a,i8)')'time set:             ',1
        write(20,'(a,i6)')'number of steps:      ',n1-n0+1
        write(20,'(a,i6)')'filename start number:',n0
        write(20,'(a,i6)')'filename increment:   ',1 

        write(20,'(a)')'time values:'
        write(20,'(f12.5)') (real(j,kind=4),j=n0,n1)
      endif
    endif

    close(20)

  end subroutine m_WriteEnsightCase


  subroutine m_WriteEnsightMeshASCII(FileOut, vertices, tetra, trian, edges)
    !------------------------------------------------------
    !
    ! WriteEnsightMeshBIN writes mesh data in Ensight's binary format
    !
    !------------------------------------------------------
    implicit none
    character(50), intent(in) :: FileOut
    real(8)      , intent(in) :: vertices(:,:)
    integer      , optional   :: tetra   (:,:)
    integer      , optional   :: trian   (:,:)
    integer      , optional   :: edges   (:,:)
    !------------------------------------------------------
    integer                   :: geo
    integer                   :: nVert
    integer                   :: nT4=0
    integer                   :: nT3=0
    integer                   :: nL2=0
    integer                   :: i
    integer      , parameter  :: iens=11
    !------------------------------------------------------
    geo  =size(vertices,1)
    nVert=size(vertices,2)
    
    if( present(tetra) )nT4= size(tetra,2)
    if( present(trian) )nT3= size(trian,2)
    if( present(edges) )nL2= size(edges,2)
   

    write(*,'(3a)')'Writing ASCII Ensight file format: ',trim(FileOut)//'.geom'
    write(*,*)'Number of Vertices:  ',nVert
    write(*,*)'Number of Tetrahedra:',nT4


    open (unit=iens,file=trim(FileOut)//'.geom',form='formatted',status='unknown')
    !
    !     Header
    !       
    write (iens,'(a)' )'Ensight ASCII Model Geometry -- File Created by'
    write (iens,'(a)' )'WriteEnsightMeshASCII'
    write (iens,'(a)' )'node id given'
    write (iens,'(a)' )'element id given'
!    write (iens,'(a)' )'extents'
!    write (iens,'(2e12.5)')minval(vertices(1,:)),maxval(vertices(1,:))
!    write (iens,'(2e12.5)')minval(vertices(2,:)),maxval(vertices(2,:))
!    write (iens,'(2e12.5)')minval(vertices(3,:)),maxval(vertices(3,:))

    write(iens,'(a)'    ) 'part'
    write(iens,'(i10)'  ) 1
    write(iens,'(a)'    )'Volume'

    !
    !     Vertices
    !
    write (iens,'(a)')'coordinates'
    write (iens,'(i10)') nVert
!   write (iens,'(i10)'  )(           i , i=1,nVert)
    write (iens,'(e12.5)')(vertices(1,i), i=1,nVert)
    write (iens,'(e12.5)')(vertices(2,i), i=1,nVert)
    write (iens,'(e12.5)')(vertices(3,i), i=1,nVert)
    !
    !     Tetrahedra
    !
    if( nT4/=0 )then
      write (iens,'(a)'   ) 'tetra4'
      write (iens,'(i10)' ) nT4
!      write (iens,'(i10)' ) (ke, ke=1,nel)
      write (iens,'(4i10)') (tetra(1:4,i),i=1,nT4)
    endif
    !
    !     Triangles
    !
    if( nT3/=0 )then
      write (iens,'(a)'   ) 'tria3'
      write (iens,'(i10)' ) nT3
!      write (iens,'(i10)' ) (ke, ke=1,nel)
      write (iens,'(3i10)') (trian(1:3,i),i=1,nT3)
    endif
    !
    !     Edges
    !
    if( nL2/=0 )then
      write (iens,'(a)'   ) 'bar2'
      write (iens,'(i10)' ) nL2
!      write (iens,'(i10)' ) (ke, ke=1,nel)
      write (iens,'(2i10)') (edges(1:2,i),i=1,nL2)
    endif

    close(iens)
  end subroutine m_WriteEnsightMeshASCII


  subroutine m_WriteEnsightMeshBIN(FileOut, vertices, tetra, trian, edges)
    !------------------------------------------------------
    !use, intrinsic::ISO_C_BINDING
    !------------------------------------------------------
    !
    ! WriteEnsightMeshBIN writes mesh data in Ensight's binary format
    !
    !------------------------------------------------------
    implicit none
    character(50), intent(in) :: FileOut
    real(8)      , intent(in) :: vertices(:,:)
    integer(4)   , optional   :: tetra   (:,:)
    integer(4)   , optional   :: trian   (:,:)
    integer(4)   , optional   :: edges   (:,:)
    !------------------------------------------------------
    integer(4)                :: geo  =0
    integer(4)                :: nVert=0
    integer(4)                :: nT4  =0
    integer(4)                :: nT3  =0
    integer(4)                :: nL2  =0  
    !
    character(80)             :: cbuffer

    integer(4)                :: i,ierr
    integer(4)   , parameter  :: iens=11
    !------------------------------------------------------
    geo  =size(vertices,1)
    nVert=size(vertices,2)
    if( present(tetra) )nT4= size(tetra,2)
    if( present(trian) )nT3= size(trian,2)
    if( present(edges) )nL2= size(edges,2)
    !

!   inquire(iolength=i, list ) en mot ou en octets

    write(*,'(3a)')'Writing Binary Ensight Mesh: ',trim(FileOut)//'.geom'
    if( nVert/=0 )write(*,'(3x,a,i10)')'Number of Vertices:  ',nVert
    if( nT3  /=0 )write(*,'(3x,a,i10)')'Number of Tetrahedra:',nT4
    if( nT3  /=0 )write(*,'(3x,a,i10)')'Number of Triangles: ',nT3
    if( nL2  /=0 )write(*,'(3x,a,i10)')'Number of Edges:     ',nL2
    !
    open(unit=iens,file=trim(FileOut)//'.geom',&
    &    form='unformatted'                   ,&
    &    recordtype='stream'                  ,&
    &    action='write'                       ,&
    &    convert='BIG_ENDIAN'                 ,&
    &    access='sequential'                   )
    !
    cbuffer = 'C Binary'                            ; write(iens) cbuffer
    cbuffer = 'Ensight Binary Model Geometry'       ; write(iens) cbuffer
    cbuffer = 'File Created by WriteEnsightMeshBIN' ; write(iens) cbuffer
    cbuffer = 'node id given'                       ; write(iens) cbuffer
    cbuffer = 'element id given'                    ; write(iens) cbuffer
    !
    cbuffer = 'extents'                             ; write(iens) cbuffer
    write (iens)minval(vertices(1,:)),maxval(vertices(1,:)) ,&
    &           minval(vertices(2,:)),maxval(vertices(2,:)) ,&
    &           minval(vertices(3,:)),maxval(vertices(3,:))
    !
    cbuffer = 'part'                                ; write(iens) cbuffer
    write(iens)int(1,kind=4)
    !
    cbuffer = 'Volume'                              ; write(iens) cbuffer 
    !
    cbuffer = 'coordinates'                         ; write(iens) cbuffer     
    write(iens) nVert
    write(iens) (i                       ,i=1,nVert)
    write(iens) (vertices(1,i),i=1,nVert)
    write(iens) (vertices(2,i),i=1,nVert)
    select case( geo)
    case(2) ; write(iens) (real(0.,kind=4),i=1,nVert)
    case(3) ; write(iens) (vertices(3,i)  ,i=1,nVert)
    end select

    if( nT4/=0 )then
      cbuffer = 'tetra4'                              ; write(iens) cbuffer
      write(iens) nT4
      write(iens) (i            , i=1,nT4)
      write(iens) (tetra(1:4,i) , i=1,nT4)
    endif

    if( nT3/=0 )then
      cbuffer = 'tria3'                               ; write(iens) cbuffer
      write(iens) nT3
      write(iens) (i            , i=1+nT4,nT4+nT3)
      write(iens) (trian(1:3,i) , i=1    ,nT3    )
    endif

    if( nL2/=0 )then
      cbuffer = 'bar2'                                ; write(iens) cbuffer
      write(iens) nL2
      write(iens) (i            , i=1+nT4+nT3,nT4+nT3+nL2)
      write(iens) (edges(1:2,i) , i=1    ,nL2    )
    endif

    close(iens)

  end subroutine m_WriteEnsightMeshBIN


  subroutine m_WriteEnsightSoluBIN(fileOut, solu, kind, idx)
    !------------------------------------------------------
    !
    ! WriteEnsightResult writes result data in Ensight's format
    !
    !------------------------------------------------------
    character(50), intent(in) :: fileOut
    real(8)      , intent(in) :: solu(:,:)
    integer(4)   , intent(in) :: kind(:)
    integer      , intent(in) :: idx
    !------------------------------------------------------
    integer                   :: idx0
    character( 4)             :: sfx
    character(80)             :: cbuffer
    character(50)             :: arch1,arch2,arch3
    character( 4)             :: prefix
    character( 1)             :: op
    integer                   :: i,nSol,geo
    !------------------------------------------------------
    geo =size(solu,1)
    nSol=size(solu,2)

    write(*,'(a,i4)')'Writing Binary Ensight Solu: ',idx
    write(*,'(3x,a,i10)')'Number of solutions: ',nSol

    idx0=idx-1

    if(                   idx0<00010 ) write(sfx,'(a3,i1)')'000',idx0
    if( idx0>=00010 .and. idx0<00100 ) write(sfx,'(a2,i2)')'00' ,idx0
    if( idx0>=00100 .and. idx0<01000 ) write(sfx,'(a1,i3)')'0'  ,idx0
    if( idx0>=01000 .and. idx0<10000 ) write(sfx,'(   i4)')      idx0

    arch1=trim(fileOut)//'_v1_'//sfx//'.dat'
    arch2=trim(fileOut)//'_p1_'//sfx//'.dat'
    write(*,'(3x,a)') arch1
    write(*,'(3x,a)') arch2


    ! VECTORIAL FILE

    open (unit=11                 ,&
    &    file=arch1               ,&
    &    form='unformatted'       ,&
    &    recordtype='stream'      ,&
    &    action='write'           ,&
    &    convert='BIG_ENDIAN'     ,&
    &    access='sequential'       )

    write(cbuffer,'(a,1e12.5)') 'Acoustic Velocity t=', 0.  ; write(11) cbuffer
    cbuffer = 'part'                                        ; write(11) cbuffer
    write(11)int(1,kind=4)
    cbuffer = 'coordinates'                                 ; write(11) cbuffer     
    write(11) (solu(2,i), i=1,nSol)
    write(11) (solu(3,i), i=1,nSol)
    write(11) (solu(4,i), i=1,nSol)
    close(11)

!    write(*,'("size(solu)=",i1,"x",i10)')size(solu,1),size(solu,2)
!    write(*,'(a,i10)')'Number of Sol @ Vertices  :',nSol
!    write(*,'(a,2e12.5)')'min,max p1: ',minval(solu(1,:)),maxval(solu(1,:))
!    write(*,'(a,2e12.5)')'min,max u1: ',minval(solu(2,:)),maxval(solu(2,:))
!    write(*,'(a,2e12.5)')'min,max v1: ',minval(solu(3,:)),maxval(solu(3,:))
!    write(*,'(a,2e12.5)')'min,max w1: ',minval(solu(4,:)),maxval(solu(4,:))


    ! SCALAR FILE (PRESSURE)

    open (unit=11                 ,&
    &    file=arch2               ,&
    &    form='unformatted'       ,&
    &    recordtype='stream'      ,&
    &    action='write'           ,&
    &    convert='BIG_ENDIAN'     ,&
    &    access='sequential'       )

    write(cbuffer,'(a,1e12.5)') 'Acoustic Pressure t=', 0.  ; write(11) cbuffer
    cbuffer = 'part'                                        ; write(11) cbuffer
    write(11)int(1,kind=4)
    cbuffer = 'coordinates'                                 ; write(11) cbuffer     
    write(11) (solu(1,i), i=1,nSol)
    close(11)

  end subroutine m_WriteEnsightSoluBIN
  
end module m_ensight